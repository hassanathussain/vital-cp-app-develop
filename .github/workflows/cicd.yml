name: Deploy to Dev, QA, UAT envs

on:
  workflow_dispatch:
    inputs:
      commit_sha:
        description: 'Enter Commit ID to deploy'
        required: true
  push:
    branches:
      - 'release/**'
      - 'develop'
      - 'sprint'
      - 'feature/**'

env:
  ECS_TASK_DEFINITION: task-definition.json
  ECS_TASK_DEFINITION_QA: task-definition-qa.json
  ECS_TASK_DEFINITION_UAT: task-definition-uat.json
  ECS_TASK_DEFINITION_PROD_US_WEST_2: task-definition-prod-us-west-2.json
  ECS_TASK_DEFINITION_PROD_US_EAST_1: task-definition-prod-us-east-1.json
  resourceGroup1: ${GITHUB_RUN_ID}-${GITHUB_RUN_NUMBER}
  resourceGroup2: ${{ github.run_number }}

permissions:
  id-token: write # This is required for requesting the JWT
  contents: read # This is required for actions/checkout.

jobs:
  Build-Image-DEV-QA-UAT:
    name: Build Image DEV QA UAT
    runs-on: ubuntu-latest

    steps:
    - name: Checkout
      uses: actions/checkout@v3
      
    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
       role-to-assume: arn:aws:iam::271328024704:role/github-actions-role
       role-session-name: simplerolesession
       aws-region: ${{ secrets.AWS_REGION }}    

    - name: Login to Amazon ECR
      id: login-ecr
      uses: aws-actions/amazon-ecr-login@v1
    - name: Build & Push docker image to Amazon ECR
      id: build-image
      env:
        ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
        IMAGE_TAG: ${{ github.sha }}
      run: |
        # Build & Push DEV/QA image 
        docker build -t $ECR_REGISTRY/vital-cp-app-qa:${{ env.resourceGroup2 }} --target base .
        docker push $ECR_REGISTRY/vital-cp-app-qa:${{ env.resourceGroup2 }}
        
        # Build & Push UAT image 
        MANIFEST=$(aws ecr batch-get-image --repository-name vital-cp-app-uat --image-ids imageTag=latest --output json | jq --raw-output --join-output '.images[0].imageManifest')
        aws ecr put-image --repository-name vital-cp-app-uat --image-tag ${{ env.resourceGroup2 }} --image-manifest "$MANIFEST"
        docker build -t $ECR_REGISTRY/vital-cp-app-uat:latest --target base .
        docker push $ECR_REGISTRY/vital-cp-app-uat:latest

  Deploy-Dev:
    name: Deploy to Dev
    runs-on: ubuntu-latest
    needs: [Build-Image-DEV-QA-UAT]
    environment:
      name: development
      url: https://dev.vital-cp-app.sorensoncloud.com

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::271328024704:role/github-actions-role
          role-session-name: simplerolesession
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update image tag in task-definition.json
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: ${{ secrets.ECR_URL }}
          replace: ${{ secrets.ECR_URL }}:${{ env.resourceGroup2 }}
          include: 'task-definition.json'
          regex: true

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: '${{ secrets.ECR_URL }}:${{ env.resourceGroup2 }}'

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

  Deploy-QA:
    name: Deploy to QA
    runs-on: ubuntu-latest
    needs: [Build-Image-DEV-QA-UAT]
    environment:
      name: qa
      url: https://qa.dev.vital-cp-app.sorensoncloud.com

    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-to-assume: arn:aws:iam::271328024704:role/github-actions-role
          role-session-name: simplerolesession
          aws-region: ${{ secrets.AWS_REGION }}

      - name: Update image tag in task-definition.json
        uses: jacobtomlinson/gha-find-replace@v2
        with:
          find: ${{ secrets.ECR_URL }}
          replace: ${{ secrets.ECR_URL }}:${{ env.resourceGroup2 }}
          include: 'task-definition-qa.json'
          regex: true

      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_QA }}
          container-name: ${{ secrets.CONTAINER_NAME }}
          image: '${{ secrets.ECR_URL }}:${{ env.resourceGroup2 }}'

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ env.ECS_TASK_DEFINITION_QA }}
          service: ${{ secrets.ECS_SERVICE }}
          cluster: ${{ secrets.ECS_CLUSTER }}
          wait-for-service-stability: true

  Deploy-UAT:
    name: Deploy to UAT
    runs-on: ubuntu-latest
    needs: [Build-Image-DEV-QA-UAT]
    environment:
      name: uat
      url: https://uat.dev.vital-cp-app.sorensoncloud.com

    steps:
    - name: Checkout
      uses: actions/checkout@v3

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v1
      with:
       role-to-assume: arn:aws:iam::271328024704:role/github-actions-role
       role-session-name: simplerolesession
       aws-region: ${{ secrets.AWS_REGION }}

    - name: Update image tag in task-definition.json
      uses: jacobtomlinson/gha-find-replace@v2
      with:
            find: ${{ secrets.ECR_URL }}
            replace: ${{ secrets.ECR_URL }}:${{ env.resourceGroup2 }}
            include: "task-definition-uat.json"
            regex: true

    - name: Fill in the new image ID in the Amazon ECS task definition
      id: task-def
      uses: aws-actions/amazon-ecs-render-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_UAT }}
        container-name: ${{ secrets.CONTAINER_NAME }}
        image: "${{ secrets.ECR_URL }}:${{ env.resourceGroup2 }}"
    - name: Deploy Amazon ECS task definition
      uses: aws-actions/amazon-ecs-deploy-task-definition@v1
      with:
        task-definition: ${{ env.ECS_TASK_DEFINITION_UAT }}
        service: ${{ secrets.ECS_SERVICE }}
        cluster: ${{ secrets.ECS_CLUSTER }}
        wait-for-service-stability: true
